{"componentChunkName":"component---src-templates-blog-post-js","path":"/posted_20220705/","result":{"data":{"site":{"siteMetadata":{"title":"Shin-tech25's Blog"}},"markdownRemark":{"id":"c427c546-9dce-53ca-ad3c-af6482e9dd02","excerpt":"このページでは、保守的な Playbook の書き方、冪等性などをしっかりと考慮した Playbook や tips を紹介しています。シンプルでクリーンな Playbook を作成しましょう。 Ansible は Red Hat 社により開発されているサーバプロビジョニング・ツールです。Linux…","html":"<p>このページでは、保守的な Playbook の書き方、冪等性などをしっかりと考慮した Playbook や tips を紹介しています。シンプルでクリーンな Playbook を作成しましょう。</p>\n<p>Ansible は Red Hat 社により開発されているサーバプロビジョニング・ツールです。Linux を始めとして、Windows、Cisco 機器などに対しても設定変更を行うことができます。汎用性が高いことがメリットです。</p>\n<p>一方、設計段階で Playbook( = Ansible 実行コード)の設計方針をしっかりと決めなければ、Playbook と処理の対応関係が次第に分かりづらくなり、保守に時間がかかるコードを量産してしまうことに繋がります。</p>\n<p>業務で実際に複雑な Playbook を見てきました。見ただけでは実際に何をする処理なのか分かりづらく、ミスの温床になります。</p>\n<p>そういった Playbook を作らないためにどうしたら良いか。以下に記載しました。</p>\n<h2>概要</h2>\n<p>保守的な Playbook を考える上でも観点はいくつかあります。\r\nその中でも特に重要な観点である、以下の 3 つ:</p>\n<ul>\n<li>トップダウン設計</li>\n<li>ドライランチェック</li>\n<li>冪等性</li>\n<li>変数の設計</li>\n</ul>\n<p>について挙げていきます。</p>\n<h3>トップダウン設計</h3>\n<p>Playbook の設計で最も重視すべきなのがこのトップダウン設計です。</p>\n<ul>\n<li>site.yml</li>\n<li>各種 Playbook</li>\n<li>role</li>\n</ul>\n<p>この順番に Playbook を記述していきます。実際の処理(Task)は、role にだけ記述します。<code class=\"language-text\">site.yml</code>や Playbook には、対応関係のみを記述します。こうすることで、メンテナンスしやすくなります。</p>\n<p><code class=\"language-text\">site.yml</code>は以下のように、Playbook を<code class=\"language-text\">import_playbook</code>により import します。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\r\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Linuxの共通設定(all)\r\n  <span class=\"token key atrule\">import_playbook</span><span class=\"token punctuation\">:</span> linux<span class=\"token punctuation\">-</span>common.yml\r\n\r\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Manager 用の設定\r\n  <span class=\"token key atrule\">import_playbook</span><span class=\"token punctuation\">:</span> manager.yml\r\n\r\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Staging用の設定\r\n  <span class=\"token key atrule\">import_playbook</span><span class=\"token punctuation\">:</span> staging.yml\r\n\r\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Production用の設定\r\n  <span class=\"token key atrule\">import_playbook</span><span class=\"token punctuation\">:</span> production.yml</code></pre></div>\n<p>各種 Playbook は以下のように、<code class=\"language-text\">role</code> を用いて処理を記述していきます。なお、<code class=\"language-text\">role</code>は<code class=\"language-text\">roles</code>の下にネストして、<code class=\"language-text\">tags</code>を付与します。\r\nこのようにすることで、<code class=\"language-text\">role</code>の局所的使用を可能にします。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\r\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Linux の共通設定用の Playbook\r\n  <span class=\"token key atrule\">hosts</span><span class=\"token punctuation\">:</span> linux\r\n  <span class=\"token key atrule\">become</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\r\n  <span class=\"token key atrule\">gather_facts</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\r\n\r\n  <span class=\"token key atrule\">roles</span><span class=\"token punctuation\">:</span>\r\n  <span class=\"token comment\"># ホスト名変更</span>\r\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> change_hostname\r\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> change_hostname\r\n\r\n  <span class=\"token comment\"># 共通パッケージインストール</span>\r\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> linux_common_packages\r\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> linux_common_packages\r\n\r\n  <span class=\"token comment\"># firewalld 有効化と設定</span>\r\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> firewalld_setup\r\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> firewalld_setup\r\n\r\n  <span class=\"token comment\"># sshd 有効化と設定</span>\r\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> sshd\r\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> sshd\r\n\r\n  <span class=\"token comment\"># docker インストール</span>\r\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> install_docker\r\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> install_docker\r\n\r\n  <span class=\"token comment\"># SELinux 無効化と必要なら再起動</span>\r\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> selinux\r\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> selinux</code></pre></div>\n<h3>ドライランチェック</h3>\n<p>ドライランチェックには、<code class=\"language-text\">ansible-playbook site.yml --check</code>のように、<code class=\"language-text\">--check</code>をオプションとして付与して実行します。\r\nPlaybookを実行する前に、冪等性のチェックと同様にドライランチェックを実行しましょう。\r\nドライランチェックを実行した際に問題が無いようなPlaybookの設計をしましょう。</p>\n<h3>冪等性</h3>\n<p>Playbookが冪等性が保たれていることを確認するために、最も簡単な方法はPlaybookを二度実行して変更箇所が無いかどうか確認することです。\r\nただし、これはサーバの設定変更が反映されてしまいます。冪等性を確認するためにAnsibleが用意してくれているツールがあります。それが、<code class=\"language-text\">Ansible Molecule</code>です。</p>\n<p><code class=\"language-text\">Molecule</code>では、テスト環境の作成、テスト、テスト環境の削除が行われます。</p>\n<ol>\n<li>テスト環境の構築</li>\n</ol>\n<p>テスト環境を新規構築します。MoleculeではAnsibleがサポートしている環境（Docker, EC2など）の構築が可能です。Molecule内の定義ファイルへ、DockerやEC2などの構築したい環境を記載することが出来ます。</p>\n<h3>変数の設計</h3>\n<h2>Playbook</h2>\n<h3>Playbook の総本山 site.yml</h3>\n<h3>役割単位で Playbook を設計する</h3>\n<h3>role に実際の処理を書く</h3>\n<h3>role はタグ付けし、局所的運用を可能にする</h3>\n<h2>Inventory の設計</h2>\n<h3>YAML 形式での Inventory 構成</h3>\n<h3>host_vars, group_vars</h3>\n<h2>role の書き方</h2>\n<h3>車輪の再発明を防ぐ!Ansible-Galaxy</h3>\n<h2>リファクタリング</h2>\n<h2>リンク</h2>\n<h3>内部リンク</h3>\n<h3>参考</h3>\n<ul>\n<li><a href=\"https://dev.classmethod.jp/articles/ansible-molecule/\">AnsibleのテストツールMoleculeでできること</a></li>\n</ul>","frontmatter":{"title":"メンテナンスしやすいAnsiblePlaybookの書き方","date":"July 06, 2022","description":"メンテナンスしやすいAnsiblePlaybookの書き方"}},"previous":{"fields":{"slug":"/new-beginnings/"},"frontmatter":{"title":"New Beginnings"}},"next":null},"pageContext":{"id":"c427c546-9dce-53ca-ad3c-af6482e9dd02","previousPostId":"2865090f-601e-5228-a507-561c002ffb6c","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"]}