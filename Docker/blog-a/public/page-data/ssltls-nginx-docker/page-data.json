{
  "componentChunkName": "component---src-templates-blog-post-index-js",
  "path": "/ssltls-nginx-docker/",
  "webpackCompilationHash": "3ee3b669352aae31c95c",
  "result": {
    "data": {
      "site": {
        "siteMetadata": {
          "title": "Shin-tech25's blog",
          "author": "Shin-tech25",
          "siteUrl": "https://Shin-tech25.netlify.app"
        }
      },
      "markdownRemark": {
        "id": "2ba99b55-ac8f-5107-b0d5-68acbb6018e2",
        "excerpt": "CICD パイプライン CICD パイプラインには GitHub Actions を用いています。GitHub の runner から対象のホストに対して docker-deploy.yml をばら撒くことでコンテナを配置しています。 Playbook(docker-deploy.yml) docker-deploy…",
        "html": "<h1 id=\"cicd-パイプライン\">CICD パイプライン</h1>\n<p>CICD パイプラインには GitHub Actions を用いています。GitHub の runner から対象のホストに対して docker-deploy.yml をばら撒くことでコンテナを配置しています。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'master'</span>\n    <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'Docker/blog-a/**'</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">CICD</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># CI Phase</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Login to Docker Hub\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> docker/login<span class=\"token punctuation\">-</span>action@v1\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.DOCKER_HUB_USERNAME <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.DOCKER_HUB_ACCESS_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Set up Docker Buildx\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> docker/setup<span class=\"token punctuation\">-</span>buildx<span class=\"token punctuation\">-</span>action@v1\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build and push\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> docker/build<span class=\"token punctuation\">-</span>push<span class=\"token punctuation\">-</span>action@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n         <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> Docker/blog<span class=\"token punctuation\">-</span>a/\n         <span class=\"token key atrule\">file</span><span class=\"token punctuation\">:</span>  Docker/blog<span class=\"token punctuation\">-</span>a/Dockerfile\n         <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n         <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>  $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.DOCKER_HUB_USERNAME <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>/blog<span class=\"token punctuation\">:</span>latest\n\n      <span class=\"token comment\"># CD Phase</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> deploy docker image\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">PRIVATE_KEY</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.PRIVATE_KEY <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          mkdir -p ~/.ssh\n          echo \"$PRIVATE_KEY\" | tr -d '\\r' > ~/.ssh/id_rsa\n          chmod 700 ~/.ssh/id_rsa\n          eval $(ssh-agent -s)\n          ssh-add ~/.ssh/id_rsa\n          ssh-keyscan -p 22 -H shin-tech25.com >> ~/.ssh/known_hosts  # Blog\n          cd Ansible/\n          ansible-playbook -i inventory/hosts.yml playbooks/docker-deploy.yml --private-key ~/.ssh/id_rsa --extra-vars 'docker_deploy_host=shin-tech25.com docker_image=\"${{ secrets.DOCKER_HUB_USERNAME }}/blog:latest\" docker_container_name=blog'</span></code></pre></div>\n<h1 id=\"playbookdocker-deployyml\">Playbook(docker-deploy.yml)</h1>\n<p>docker-deploy.yml は以下のように role を import しています。role はそれぞれの処理を担当します。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Docker Deploy\n  <span class=\"token key atrule\">hosts</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"{{ docker_deploy_host }}\"</span>\n  <span class=\"token key atrule\">become</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">gather_facts</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n  <span class=\"token key atrule\">roles</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> firewalld_tcp_port_open\n      <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> firewalld_tcp_port_open\n      <span class=\"token key atrule\">vars</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">firewalld_tcp_port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> firewalld_tcp_port_open\n      <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> firewalld_tcp_port_open\n      <span class=\"token key atrule\">vars</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">firewalld_tcp_port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">443</span>\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> docker_image_prune\n      <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> docker_image_prune\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> docker_container_stop\n      <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> docker_container_stop\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> docker_container_prune\n      <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> docker_container_prune\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> docker_pull_image\n      <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> docker_pull_image\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> docker_container_run\n      <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> docker_container_run</code></pre></div>\n<h1 id=\"dockerfile\">Dockerfile</h1>\n<p>nginx:latest のイメージをベースに必要なライブラリのインストールを行った後、ssl.conf をイメージにコピーして含ませるということをしています。\npublic/は今回は静的サイトジェネレーター(Gatsby)のビルド成果物が含まれているフォルダです。この部分は適宜各々の環境で読み替えてください。</p>\n<p>Dockerfile</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">FROM nginx<span class=\"token punctuation\">:</span>latest\n\nRUN apt<span class=\"token punctuation\">-</span>get update &amp;&amp; apt<span class=\"token punctuation\">-</span>get install <span class=\"token punctuation\">-</span>y \\\n  openssl \\\n  ssl<span class=\"token punctuation\">-</span>cert \\\n  &amp;&amp; apt<span class=\"token punctuation\">-</span>get clean \\\n  &amp;&amp; rm <span class=\"token punctuation\">-</span>rf /var/lib/apt/lists/*\n\nCOPY public/  /usr/share/nginx/html/\nCOPY ./ssl.conf /etc/nginx/conf.d/\n\nCMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"/usr/sbin/nginx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-g\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"daemon off;\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>ssl.conf</p>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">server {\n    listen       443 ssl;\n    server_name  localhost;\n\n    ssl_certificate      /etc/ssl/certs/ssl-cert-snakeoil.pem;\n    ssl_certificate_key  /etc/ssl/private/ssl-cert-snakeoil.key;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n}</code></pre></div>\n<h1 id=\"lets-encrypt-について\">Let’s Encrypt について</h1>\n<p>Let’s Encrypt はフリーで証明書を発行してくれる認証局です。米国の非営利団体である ISRG(Internet Security Research Group)により運営されています。全ての Web サイトを暗号化することを目指したプロジェクトです。証明書有効期限は 90 日と短いですが、コマンドで自動更新が可能です。</p>\n<ul>\n<li><a href=\"https://letsencrypt.org/ja/\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt</a></li>\n<li><a href=\"https://free-ssl.jp/\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt 総合ポータル</a></li>\n</ul>\n<p>非営利団体ですが、現在では Facebook やシスコシステムズ、Akamai Technologies、Verizon といった数多くの大手企業に支えられているため、財務基盤に問題があるわけではありません。</p>\n<p>Let’s Encrypt では、90 日間有効な DV(Domain Validation)SSL 証明書を 2 つの認証方式（ドメイン認証、DNS 認証）で提供しています。SSL 証明書は無料で提供されていますが、暗号強度などは一般的に販売されている SSL 署名書と同じです。</p>\n<p>また、大きな特徴として ACME(Automated Certificate Management Environment)プロトコルと呼ばれる SSL 証明書を自動発行する仕組みを利用している点です。他の認証局と異なり、認証してから数秒で SSL 証明書が発行され、すぐにサーバーへデプロイ出来るという非常に高度な SSL 証明書発行インフラを運用しています。</p>\n<p>管理者（root）権限のあるサーバーで Let’s Encrypt を利用する場合は、一般的に certbot などのアプリケーションが利用されています。事前にスクリプトが定期的に実行されるように設定しておけば、レンタルサーバーの無料 SSL 機能と同様の自動更新が比較的簡単に実現できます。</p>\n<h1 id=\"lets-encrypt-の使い方\">Let’s Encrypt の使い方</h1>\n<p>Let’s Encrypt はクライアントソフトウェア「Certbot」を使用することで、SSL/TLS サーバ証明書の取得・更新作業を自動化出来る仕組みになっています。一般の認証局では、証明書署名要求＝ CSR(Certificate Signing Request)が必要ですが、これらの作業を Certbot クライアントが自動的に行います。</p>\n<h2 id=\"certbot-クライアントの準備\">Certbot クライアントの準備</h2>\n<p>私の環境では、CentOS Stream-8 を用いています。CentOS に準じて解説します。</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">// インストール\nsudo yum install epel-release\nsudo yum install certbot python-certbot-apache\n\n// クライアント起動\ncertbot</code></pre></div>\n<h2 id=\"テスト実行（結果）\">テスト実行（結果）</h2>\n<p>特に問題ない場合は、Certbot クライアントが起動して、TUI 画面に以下のように表示されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">No names were found in your configuration files.\nYou should specify ServerNames in your config files in order to allow for accurate installation of your certificate.\nIf you do use the default vhost, you may specify the name manually.\nWould you like to continue ?</code></pre></div>\n<p>このメッセージの後、NO を選択して、SSL/TLS サーバ証明書の取得に進みます。</p>\n<h2 id=\"ssltls-サーバ証明書の取得\">SSL/TLS サーバ証明書の取得</h2>\n<p>証明書取得コマンドの実行</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">certbot certonly --webroot -w /var/www/html -d shin-tech25.com -d www.shin-tech25.com</code></pre></div>\n<h1 id=\"参考\">参考</h1>\n<ul>\n<li><a href=\"https://oki2a24.com/2018/11/06/enable-ssl-tls-in-docker-nginx/\" target=\"_blank\" rel=\"noopener\">Docker の nginx:latest(1.15.5)で SSL/TLS を使えるようにする最低限の Dockerfile を作りました</a></li>\n<li><a href=\"https://qiita.com/__juiblex__/items/fe599755dc321b7489b8\" target=\"_blank\" rel=\"noopener\">nginx リバースプロキシ環境で Let’s Encrypt による SSL/TLS 化</a></li>\n<li><a href=\"https://ssl.sakura.ad.jp/column/letsencrypt/\" target=\"_blank\" rel=\"noopener\">無料 SSL 証明書の Let’s Encrypt とは？</a></li>\n<li><a href=\"https://free-ssl.jp/usage/\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt の使い方</a></li>\n</ul>",
        "tableOfContents": "<ul>\n<li><a href=\"/ssltls-nginx-docker/#cicd-%E3%83%91%E3%82%A4%E3%83%97%E3%83%A9%E3%82%A4%E3%83%B3\">CICD パイプライン</a></li>\n<li><a href=\"/ssltls-nginx-docker/#playbookdocker-deployyml\">Playbook(docker-deploy.yml)</a></li>\n<li><a href=\"/ssltls-nginx-docker/#dockerfile\">Dockerfile</a></li>\n<li><a href=\"/ssltls-nginx-docker/#lets-encrypt-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">Let’s Encrypt について</a></li>\n<li>\n<p><a href=\"/ssltls-nginx-docker/#lets-encrypt-%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9\">Let’s Encrypt の使い方</a></p>\n<ul>\n<li><a href=\"/ssltls-nginx-docker/#certbot-%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%81%AE%E6%BA%96%E5%82%99\">Certbot クライアントの準備</a></li>\n<li><a href=\"/ssltls-nginx-docker/#%E3%83%86%E3%82%B9%E3%83%88%E5%AE%9F%E8%A1%8C%EF%BC%88%E7%B5%90%E6%9E%9C%EF%BC%89\">テスト実行（結果）</a></li>\n<li><a href=\"/ssltls-nginx-docker/#ssltls-%E3%82%B5%E3%83%BC%E3%83%90%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%81%AE%E5%8F%96%E5%BE%97\">SSL/TLS サーバ証明書の取得</a></li>\n</ul>\n</li>\n<li><a href=\"/ssltls-nginx-docker/#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>",
        "fields": { "slug": "/ssltls-nginx-docker" },
        "frontmatter": {
          "title": "Dockerで動くNginx WebサイトをSSL/TLS対応する方法",
          "date": "2022-07-19",
          "description": "Dockerで動くNginx WebサイトをSSL/TLS対応する方法について。",
          "tags": ["Docker", "Nginx", "SSL/TLS"],
          "slug": "ssltls-nginx-docker"
        }
      }
    },
    "pageContext": {
      "isCreatedByStatefulCreatePages": false,
      "slug": "/ssltls-nginx-docker",
      "relatedPosts": [],
      "latestPosts": [
        {
          "title": "Markdownで書ける静的サイトにこだわる理由",
          "slug": "why-blog-by-markdown",
          "date": "2022-07-19"
        },
        {
          "title": "クラウドネイティブとは何か",
          "slug": "cloud-native-computing-basic",
          "date": "2022-07-19"
        },
        {
          "title": "D3.js x React.js 基礎",
          "slug": "react-d3-basic",
          "date": "2022-07-17"
        },
        {
          "title": "React Hooks 基礎",
          "slug": "react-hooks-basic",
          "date": "2022-07-17"
        },
        {
          "title": "JavaScriptによる配列操作",
          "slug": "JavaScript-Array-Manipulation",
          "date": "2022-07-17"
        }
      ],
      "previous": {
        "fields": { "slug": "/why-blog-by-markdown" },
        "frontmatter": {
          "title": "Markdownで書ける静的サイトにこだわる理由",
          "date": "2022-07-19",
          "tags": ["ブログ", "副業"],
          "slug": "why-blog-by-markdown",
          "keywords": "Markdown, ブログ, 静的サイト"
        }
      },
      "next": null
    }
  }
}
