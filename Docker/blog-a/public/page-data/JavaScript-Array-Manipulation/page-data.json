{"componentChunkName":"component---src-templates-blog-post-index-js","path":"/JavaScript-Array-Manipulation/","webpackCompilationHash":"a0168048ff43ee0ea536","result":{"data":{"site":{"siteMetadata":{"title":"Shin-tech25's blog","author":"Shin-tech25","siteUrl":"https://Shin-tech25.netlify.app"}},"markdownRemark":{"id":"d3c49a8b-ec88-5461-b6f7-adb81cc929cb","excerpt":"概要 フロントエンド開発で JavaScript を触る機会が増えてきたため、勉強も兼ねて配列操作方法をまとめました。\nこのページでは、JavaScript で用いる配列操作関数である、、、、、を学ぶことができます。 それぞれの関数の使い方 map…","html":"<h1 id=\"概要\">概要</h1>\n<p>フロントエンド開発で JavaScript を触る機会が増えてきたため、勉強も兼ねて配列操作方法をまとめました。\nこのページでは、JavaScript で用いる配列操作関数である、<code class=\"language-text\">map()</code>、<code class=\"language-text\">filter()</code>、<code class=\"language-text\">forEach()</code>、<code class=\"language-text\">find()</code>、<code class=\"language-text\">findIndex()</code>を学ぶことができます。</p>\n<h1 id=\"それぞれの関数の使い方\">それぞれの関数の使い方</h1>\n<h2 id=\"map\">map()</h2>\n<p>配列のメソッドとして実行し、返り値として結果からなる新しい配列を返すのが特徴です。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>新しい配列<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>古い配列<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>処理内容<span class=\"token punctuation\">)</span></code></pre></div>\n<p>例えば、以下の例では 1~5 の数字が入った配列をもとに、2 倍して新たな配列を返しています。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> newNumbers <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> number <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 出力</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newNumbers<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [2, 4, 6, 8, 10]</span></code></pre></div>\n<p>また、次の例のように、第一引数をアンダースコア<code class=\"language-text\">_</code>で表現し、第二引数（インデックス）の値に従って処理を行うことも可能です。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> map2 <span class=\"token operator\">=</span> array2<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _ <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// array2 = [ 1, 8, 27, 64 ]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map2<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"filter\">filter()</h2>\n<p><code class=\"language-text\">filter()</code>は、<code class=\"language-text\">map()</code>と似ていて、配列のメソッドとして実行し、特定の条件を満たす要素だけを取り出す関数です。</p>\n<p>配列の中から奇数だけを取り出す</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<p>配列の中から、ある条件に合う要素全てを抽出し新しい配列として生成したい場合などに用います。</p>\n<p>ある条件に合う最初の要素のみ抽出したい場合は<code class=\"language-text\">find()</code>を使いましょう。</p>\n<h2 id=\"foreach\">forEach()</h2>\n<p>配列内の各要素に対して昇順で、1 回ずつ実行する</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//出力</span>\n<span class=\"token comment\">//1</span>\n<span class=\"token comment\">//2</span>\n<span class=\"token comment\">//3</span></code></pre></div>\n<p><code class=\"language-text\">map()</code>や<code class=\"language-text\">filter()</code>などと異なり、配列内の要素を用いて何かしらの処理を行いたい時などに用います。</p>\n<p>基本的に、いきなり forEach を用いるのではなく、map()や filter()などを検討するほうが可読性も上がり良いでしょう。</p>\n<h2 id=\"find\">find()</h2>\n<p>ある条件に合う最初の要素の値を返す</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> dataset <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"001\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"aaa\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"002\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"bbb\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"003\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"ccc\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"004\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"aaa\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> newDataset <span class=\"token operator\">=</span> dataset<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> data<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 出力</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newDataset<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// { id: \"001\", name: \"aaa\"}</span></code></pre></div>\n<p>上記の出力結果のように、最初に条件に合った要素を取得する。\n<code class=\"language-text\">truthy</code>な値を返すまで繰り返し処理が行わます。</p>\n<p><code class=\"language-text\">truthy</code>とは、Boolean コンテキストに現れた時に true とみなされる値のことです。</p>\n<h2 id=\"findindex\">findIndex()</h2>\n<p>ある条件に合う最初の要素の位置を返します。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> dataset <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"001\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"002\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"003\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"ccc\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"004\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"ddd\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> newDataset <span class=\"token operator\">=</span> dataset<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> data<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//出力</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newDataset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//1</span></code></pre></div>\n<p>返り値</p>\n<ul>\n<li>条件に合う最初の要素の index 番号（位置）</li>\n<li>どの要素も条件に一致しない場合は<code class=\"language-text\">-1</code>が返り値となる</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// どの要素も条件に一致しない場合</span>\n\n<span class=\"token keyword\">const</span> dataset <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"001\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"aaa\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"002\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"bbb\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"003\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"ccc\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"004\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"aaa\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> newDataset <span class=\"token operator\">=</span> dataset<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> data<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">\"ddd\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 出力</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newDataset<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// -1</span></code></pre></div>\n<h1 id=\"参考\">参考</h1>\n<ul>\n<li><a href=\"https://zenn.dev/yuji6523/articles/24ae6dbcc791b5\" target=\"_blank\" rel=\"noopener\">【JS】配列操作まとめ（map, filter, forEach, find, findIndex）</a></li>\n<li><a href=\"https://ja.stackoverflow.com/questions/65430/%E3%82%A2%E3%83%B3%E3%83%80%E3%83%BC%E3%83%90%E3%83%BC%E3%81%AE%E3%81%BF%E3%81%AE%E5%A4%89%E6%95%B0%E3%81%AE%E6%84%8F%E5%91%B3\" target=\"_blank\" rel=\"noopener\"> アンダーバーのみの変数の意味 </a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/JavaScript-Array-Manipulation/#%E6%A6%82%E8%A6%81\">概要</a></li>\n<li>\n<p><a href=\"/JavaScript-Array-Manipulation/#%E3%81%9D%E3%82%8C%E3%81%9E%E3%82%8C%E3%81%AE%E9%96%A2%E6%95%B0%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9\">それぞれの関数の使い方</a></p>\n<ul>\n<li><a href=\"/JavaScript-Array-Manipulation/#map\">map()</a></li>\n<li><a href=\"/JavaScript-Array-Manipulation/#filter\">filter()</a></li>\n<li><a href=\"/JavaScript-Array-Manipulation/#foreach\">forEach()</a></li>\n<li><a href=\"/JavaScript-Array-Manipulation/#find\">find()</a></li>\n<li><a href=\"/JavaScript-Array-Manipulation/#findindex\">findIndex()</a></li>\n</ul>\n</li>\n<li><a href=\"/JavaScript-Array-Manipulation/#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>","fields":{"slug":"/JavaScript-Array-Manipulation"},"frontmatter":{"title":"JavaScriptによる配列操作","date":"2022-07-17","description":"JavaScript 配列操作まとめ","tags":["JavaScript"],"slug":"JavaScript-Array-Manipulation"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/JavaScript-Array-Manipulation","relatedPosts":[],"latestPosts":[{"title":"マイクロサービスの特徴","slug":"micro-service-feature","date":"2022-07-23"},{"title":"AnsibleでPrometheus, Grafanaによる統合監視システム基盤の構築","slug":"Ansible-Prometheus-Grafana","date":"2022-07-21"},{"title":"AWSの責任共有モデルとセキュリティ対策","slug":"aws-responsibility-security","date":"2022-07-21"},{"title":"gatsby buildからgit push するまでのバッチファイル作成","slug":"blog-tools","date":"2022-07-21"},{"title":"NginxのWebサイトをLet's EncryptでSSL対応する方法","slug":"Nginx-LetsEncrypt","date":"2022-07-19"}],"previous":{"fields":{"slug":"/book-review-howto-learn"},"frontmatter":{"title":"山口周著「知的戦闘力を高める独学の技法」を読んで","date":"2022-07-14","tags":["ビジネス書"],"slug":"book-review-howto-learn","keywords":"ビジネス書, 自己啓発, 山口周, 勉強法, 社会人, 知的戦闘力"}},"next":{"fields":{"slug":"/react-hooks-basic"},"frontmatter":{"title":"React Hooks 基礎","date":"2022-07-17","tags":["React"],"slug":"react-hooks-basic","keywords":"React,React Hooks,State, Props, useEffect, useMemo, useRef"}}}}}