{"componentChunkName":"component---src-templates-blog-post-index-js","path":"/gatsby-site-search/","webpackCompilationHash":"fc59d2c4c836c35839cd","result":{"data":{"site":{"siteMetadata":{"title":"Shin-tech25's blog","author":"Shin-tech25","siteUrl":"https://Shin-tech25.netlify.app"}},"markdownRemark":{"id":"103349bf-0073-52b4-9082-057587118393","excerpt":"Gatsby ではビルド時に静的ページを生成する為、検索結果ページのように入力された検索ワードによって動的に内容が変わるようなページは生成することができません。 なので検索機能は SaaS…","html":"<p>Gatsby ではビルド時に静的ページを生成する為、検索結果ページのように入力された検索ワードによって動的に内容が変わるようなページは生成することができません。</p>\n<p>なので検索機能は SaaS などを利用して実装するのが一般的になっているみたいなんですが、<a href=\"https://mottox2.com/posts/268\" target=\"_blank\" rel=\"noopener\">こちらのブログ</a>で検索機能を自前実装する方法が紹介されていて、参考にさせていただいたところ思った以上に手軽にできたので、今回の記事ではその実装の記録を残しておきたいと思います。</p>\n<h2 id=\"実装方法\">実装方法</h2>\n<p>以下のような手順を踏んで実装していきます。</p>\n<ol>\n<li>useStaticQuery を使って検索コンポーネント内で全記事データを取得する</li>\n<li>検索コンポーネント内で検索処理</li>\n</ol>\n<p>参考にさせていただいたブログ記事では、ビルドの度に全記事分の情報が格納された json ファイルを生成し、それを React コンポーネントから axios を使って取得していましたが、今回は<code class=\"language-text\">useStaticQuery</code>を利用して、検索用のコンポーネント内から全記事データを取得してみる事にしました。</p>\n<h2 id=\"usestaticquery-で全記事データを取得\">useStaticQuery で全記事データを取得</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> tempData <span class=\"token operator\">=</span> <span class=\"token function\">useStaticQuery</span><span class=\"token punctuation\">(</span>graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query SearchData {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: 1000\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            slug\n            tags\n            keywords\n          }\n        }\n      }\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  tempData<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    temp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>全件取得なので、トップページで使うクエリとよく似た感じのクエリになります。検索対象にタイトルとタグとキーワードを含めたいと思っているので、その三つとスラッグを GraphQL を介して取得して、扱いやすい形に変換したものを<code class=\"language-text\">data</code>に格納しています。<code class=\"language-text\">data</code>に入っているデータは以下のような形になっています。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Gatsby製ブログでサイト内検索を実装しました\"</span><span class=\"token punctuation\">,</span>\n    slug<span class=\"token punctuation\">:</span> <span class=\"token string\">\"gatsby-site-search\"</span><span class=\"token punctuation\">,</span>\n    tags<span class=\"token punctuation\">:</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    keywords<span class=\"token punctuation\">:</span> <span class=\"token string\">\"JavaScript\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"VSCodeのMarketplaceに自作拡張機能を公開する方法\"</span><span class=\"token punctuation\">,</span>\n    slug<span class=\"token punctuation\">:</span> <span class=\"token string\">\"publish-vscode-extension\"</span><span class=\"token punctuation\">,</span>\n    tags<span class=\"token punctuation\">:</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    keywords<span class=\"token punctuation\">:</span> <span class=\"token string\">\"開発ツール\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"検索処理\">検索処理</h2>\n<p>まず、検索対象にするタイトル・タグ・キーワードを一つの文字列として連結させ、その文字列が入力された値を含むかどうかで filter をかけています。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">,</span> setResult<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">search</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token punctuation\">.</span>tags<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token punctuation\">.</span>keywords<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n    </span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setResult</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>value <span class=\"token operator\">!==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>検索ワード(<code class=\"language-text\">props.value</code>)が変更される度に検索処理が走り、<code class=\"language-text\">result</code>には検索ワードを含む記事だけが格納されます。あとはこれを表示させる UI を作れば完了です 🙆‍</p>\n<h2 id=\"検索ワードをハイライトさせてみる\">検索ワードをハイライトさせてみる</h2>\n<p>タイトルに含まれる検索ワードをハイライトするコンポーネントを作ってみました。タイトルから検索ワード部分を抜き出して、span タグで囲んだものに置き換えるというだけの簡単な作りですが、ちょっと見た目が華やかになるんじゃないかなと思います 💅✨</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TextHighlighter</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> str<span class=\"token punctuation\">,</span> includes <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props\n  <span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>includes<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> includes<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>\n    item<span class=\"token punctuation\">,</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;span style=\"background: rgba(255, 250, 118, 0.4); padding: 3px 0\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>span dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> __html<span class=\"token punctuation\">:</span> res <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>呼び出す時はこんな感じです ↓\nstr にタイトル、includes に検索文字列を渡します。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>TextHighLighter str<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span> includes<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<h2 id=\"雑感\">雑感</h2>\n<p><a href=\"https://github.com/Shin-tech25/Shin-tech25-gatsby-blog/blob/master/src/components/search/index.js\" target=\"_blank\" rel=\"noopener\">実際のコードはこちらから！</a></p>\n<p>最初はビルドの度に json を生成する方法で実装していたんですが、useStaticQuery を使う方法で作り直してみたので、それに伴い記事の内容も変更しました。</p>\n<p>シンプルな記述のみで実装できるので、個人ブログの検索機能程度であれば<a href=\"https://www.gatsbyjs.org/docs/adding-search/\" target=\"_blank\" rel=\"noopener\">Gatsby の公式リファレンスガイド</a>で紹介されている SaaS やライブラリを使用する方法よりも自前実装の方が早いんじゃないかな？という気さえしています。いろいろカスタマイズもしやすいですし、おすすめです。</p>","tableOfContents":"<ul>\n<li><a href=\"/gatsby-site-search/#%E5%AE%9F%E8%A3%85%E6%96%B9%E6%B3%95\">実装方法</a></li>\n<li><a href=\"/gatsby-site-search/#usestaticquery-%E3%81%A7%E5%85%A8%E8%A8%98%E4%BA%8B%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E5%8F%96%E5%BE%97\">useStaticQuery で全記事データを取得</a></li>\n<li><a href=\"/gatsby-site-search/#%E6%A4%9C%E7%B4%A2%E5%87%A6%E7%90%86\">検索処理</a></li>\n<li><a href=\"/gatsby-site-search/#%E6%A4%9C%E7%B4%A2%E3%83%AF%E3%83%BC%E3%83%89%E3%82%92%E3%83%8F%E3%82%A4%E3%83%A9%E3%82%A4%E3%83%88%E3%81%95%E3%81%9B%E3%81%A6%E3%81%BF%E3%82%8B\">検索ワードをハイライトさせてみる</a></li>\n<li><a href=\"/gatsby-site-search/#%E9%9B%91%E6%84%9F\">雑感</a></li>\n</ul>","fields":{"slug":"/gatsby-site-search"},"frontmatter":{"title":"Gatsby製ブログでサイト内検索を実装しました","date":"2019-10-25","description":"Gatsbyではビルド時に静的ページを生成する為、検索結果ページのように入力された検索ワードによって動的に内容が変わるようなページは生成することができません。なので検索機能はSaaSなどを利用して実装するのが一般的になっているみたいなんですが、こちらのブログで検索機能を自前実装する方法が紹介されていて、参考にさせていただいたところ思った以上に手軽にできたので、今回の記事ではその実装の記録を残しておきたいと思います。","tags":["React","Gatsby"],"slug":"gatsby-site-search"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/gatsby-site-search","relatedPosts":[{"title":"Gatsby + Markdownでブログを作り直しました","slug":"gatsby-blog-with-markdown","date":"2019-09-12","score":200},{"title":"GatsbyJS + Contentful + Netlifyでブログ作ってみた","slug":"gatsby-contentful-netlify-blog","date":"2019-07-04","score":200},{"title":"Sass(SCSS)の関数をstyled-componentsでも使いたい","slug":"sass-styled-components","date":"2019-08-11","score":150},{"title":"【styled-components】keyframesにpropsを渡す方法","slug":"styled-components-keyframes","date":"2019-08-06","score":150}],"latestPosts":[{"title":"山口周著「知的戦闘力を高める独学の技法」を読んで","slug":"book-review-howto-learn","date":"2022-07-14"},{"title":"メンテナンスしやすいAnsiblePlaybookの書き方","slug":"ansible-playbook-maintainance","date":"2022-07-06"},{"title":"Moff animal cafe イーアス高尾に行ってきました","slug":"moff-iias-takao","date":"2022-07-03"},{"title":"Commitizenのプレフィックスを絵文字に変更してコミットメッセージを可愛くしました","slug":"commitizen-with-emojis","date":"2020-11-22"},{"title":"VSCodeのMarketplaceに自作拡張機能を公開する方法","slug":"publish-vscode-extension","date":"2019-10-13"}],"previous":{"fields":{"slug":"/publish-vscode-extension"},"frontmatter":{"title":"VSCodeのMarketplaceに自作拡張機能を公開する方法","date":"2019-10-13","tags":["VSCode","テーマ開発"],"slug":"publish-vscode-extension","keywords":"開発ツール"}},"next":{"fields":{"slug":"/commitizen-with-emojis"},"frontmatter":{"title":"Commitizenのプレフィックスを絵文字に変更してコミットメッセージを可愛くしました","date":"2020-11-22","tags":["Git","Commitizen"],"slug":"commitizen-with-emojis","keywords":"Git"}}}}}