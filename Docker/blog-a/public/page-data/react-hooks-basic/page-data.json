{"componentChunkName":"component---src-templates-blog-post-index-js","path":"/react-hooks-basic/","webpackCompilationHash":"01abf69d7dfdaae79bc8","result":{"data":{"site":{"siteMetadata":{"title":"Shin-tech25's blog","author":"Shin-tech25","siteUrl":"https://Shin-tech25.netlify.app"}},"markdownRemark":{"id":"1647e71b-baf7-5285-b0c6-7490e1f5c613","excerpt":"フックとは何か React のバージョン 16.8.0 で追加された機能であり、簡潔に言ってしまえば関数コンポーネントで利用できる関数のこと。\nReact には様々な機能を持つフックが組み込まれており、それらを利用すれば関数コンポーネントで state…","html":"<h2 id=\"フックとは何か\">フックとは何か</h2>\n<p>React のバージョン 16.8.0 で追加された機能であり、簡潔に言ってしまえば関数コンポーネントで利用できる関数のこと。\nReact には様々な機能を持つフックが組み込まれており、それらを利用すれば関数コンポーネントで state 管理などを行うことが出来る。</p>\n<p>フックを利用することで以下のようなメリットがあります。</p>\n<p>・同等の機能を実装する場合、クラスコンポーネントよりもコード量が少なくなる。\n・ロジックを分離することができるため、ロジックの再利用やテストがしやすい。</p>\n<p>公式ドキュメントのフックの解説は難解に感じると思いますが、誤解を恐れず、簡潔に言うとフックはただの関数です。\n「関数コンポーネントで利用できる便利な関数」ぐらいな認識で良いと思います。</p>\n<h2 id=\"usestate\">useState</h2>\n<p>state と state 更新関数を返すフック。\nこのフックを利用することで、コンポーネント内で state 管理を行うことができます。\nstate の特徴として、値が更新されれば再レンダーされます。</p>\n<h3 id=\"usestate-の構文\">useState の構文</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> state更新関数<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>stateの初期値<span class=\"token punctuation\">)</span></code></pre></div>\n<p>次の例では、useState にオブジェクトを持っています。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>vote<span class=\"token punctuation\">,</span> setVote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> kinoko<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> takenoko<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">voteKinoko</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setVote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>vote<span class=\"token punctuation\">,</span> kinoko<span class=\"token punctuation\">:</span> vote<span class=\"token punctuation\">.</span>kinoko <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">voteTakenoko</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setVote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>vote<span class=\"token punctuation\">,</span> takenoko<span class=\"token punctuation\">:</span> vote<span class=\"token punctuation\">.</span>takenoko <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>きのこ<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>vote<span class=\"token punctuation\">.</span>kinoko<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>たけのこ<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>vote<span class=\"token punctuation\">.</span>takenoko<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>voteKinoko<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>きのこ<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>voteTakenoko<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>たけのこ<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"useeffect\">useEffect</h2>\n<p><code class=\"language-text\">useEffect()</code>は、コンポーネントに副作用を追加するフックです。\n副作用は、次のような処理を実行する関数です。</p>\n<ul>\n<li>React から生成された DOM の変更</li>\n<li>API との通信</li>\n<li>非同期処理</li>\n<li>console.log</li>\n</ul>\n<p>「副作用」のイメージが掴みづらいかもしれませんが、「コンポーネントのレンダー後かアンマウント後に何らかの処理を実行させたい時に<code class=\"language-text\">useEffect()</code>を利用する」という認識で問題ないかと思います。</p>\n<h3 id=\"useeffect-の構文\">useEffect の構文</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>副作用<span class=\"token punctuation\">,</span> 依存配列<span class=\"token punctuation\">)</span></code></pre></div>\n<p>依存配列は、副作用が依存している値が格納された配列です。引数の渡し方によって副作用が実行されるタイミングは異なります。</p>\n<h3 id=\"使用例\">使用例</h3>\n<h4 id=\"第２引数なし（毎回実行）\">第２引数なし（毎回実行）</h4>\n<p>次のように副作用だけ渡すと、コンポーネントがレンダーされた後に副作用は毎回実行されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"completed render\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"依存配列あり\">依存配列あり</h4>\n<p>useEffect の第２引数には、副作用が依存している値を配列で渡すことが出来ます。\n副作用が依存している値を指定すれば、その値が更新された時だけ副作用が実行されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"初回のみ実行\">初回のみ実行</h4>\n<p>第２引数に空配列（[]）を指定すれば、コンポーネントがレンダーされた後に一度だけ副作用が実行されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"completed render\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"useref\">useRef</h2>\n<p><code class=\"language-text\">useRef()</code>は、ref オブジェクト（React.createRef の戻り値）を返すフックです。</p>\n<p>ref オブジェクトを利用することで、DOM の参照や、コンポーネント内で値を保持できます。</p>\n<p>「値を保持する」という点に関しては、<code class=\"language-text\">useState</code>と同じです。</p>\n<p>しかし、<code class=\"language-text\">useState</code>とは異なり、<code class=\"language-text\">useRef</code>で生成した値を更新してもコンポーネントは再レンダーされない。</p>\n<p>そのため、レンダーには関係ない<code class=\"language-text\">state</code>を扱いたい時（コンポーネント内で値を保持したいが、値を更新してもコンポーネントを再レンダーしたくない時）などに利用します。</p>\n<h3 id=\"useref-の構文\">useRef の構文</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ref オブジェクト <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>初期値<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>useRef の引数に渡した値が、ref オブジェクトの current プロパティの値になります。</p>\n<p>そのため、次のように useRef に 0 を渡せば、ref オブジェクトの curret プロパティの値は 0 になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token comment\">//-> 0</span></code></pre></div>\n<p>current プロパティの値を更新したい時は、次のように更新することができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">count<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> count<span class=\"token punctuation\">.</span>current <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>\n<h3 id=\"使用例-1\">使用例</h3>\n<h4 id=\"dom-の参照\">DOM の参照</h4>\n<p>useRef で DOM を参照したい場合、作成した ref オブジェクトを HTML 要素の ref 属性に指定する必要があります。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> inputEl <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>inputEl<span class=\"token punctuation\">}</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>このようにすることで、<code class=\"language-text\">inputEl.current</code>で DOM を参照することが出来ます。</p>\n<p>次の例では、<code class=\"language-text\">prevCountRef.current</code> に<code class=\"language-text\">count</code>の値を設定する処理内容を<code class=\"language-text\">useEffect</code>に記述しています。\nbutton onClick によって<code class=\"language-text\">count</code>は更新されます。これによってコンポーネントは再レンダリングした後に前回の count の値を prevCountRef に代入します。\n※実際には、レンダリングの方が useEffect の処理より先のため、前回の count の値と更新された count の値を比較した後に prevCountRef.current が更新されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect<span class=\"token punctuation\">,</span> useRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> prevCountRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    prevCountRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> count\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        現在のcount<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span>、前回のcount<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>prevCountRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>前回のcountより<span class=\"token punctuation\">{</span>prevCountRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">></span> count <span class=\"token operator\">?</span> <span class=\"token string\">\"小さい\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"大きい\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>次のサンプルコードでは、useRef で ref オブジェクトを作成し、それを HTML 要素の ref 属性に指定して DOM を参照しています。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> inputEl <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>inputEl<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n    inputEl<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>inputEl<span class=\"token punctuation\">}</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>input 要素をフォーカスする<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"usememo\">useMemo</h2>\n<p>React では、不要な再計算やコンポーネントの再レンダーを抑えることが、パフォーマンス最適化の基本的な戦略となります。</p>\n<p>それらを実現するための手段として、React.memo、useCallback、useMemo を利用します。\nReact.memo、useCallback の解説は割愛させていただきます。</p>\n<h3 id=\"usememo-の構文\">useMemo の構文</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> 値を計算するロジック<span class=\"token punctuation\">,</span> 依存配列<span class=\"token punctuation\">)</span></code></pre></div>\n<p>依存配列は、値を計算するロジックが依存している値（値の計算に必要な値）が格納された配列です。\n例えば、count という変数の値を２倍にした値をメモ化したい場合は次のようになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> count <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>依存している値が更新されれば、値が再計算されます。</p>\n<h4 id=\"使用例-2\">使用例</h4>\n<p>次のサンプルコードでは、useMemo を利用して不要な再計算をスキップしています。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useMemo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count1<span class=\"token punctuation\">,</span> setCount1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count2<span class=\"token punctuation\">,</span> setCount2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">double</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">count</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> i<span class=\"token operator\">++</span>\n    <span class=\"token keyword\">return</span> count <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> doubledCount <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span>count2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>count2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span><span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span>fast<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Counter<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>cuont1<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount1</span><span class=\"token punctuation\">(</span>count1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span>fast<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span><span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span>slow<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        Counter<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>count2<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>doubledCount<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount2</span><span class=\"token punctuation\">(</span>count2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span>slow<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","tableOfContents":"<ul>\n<li><a href=\"/react-hooks-basic/#%E3%83%95%E3%83%83%E3%82%AF%E3%81%A8%E3%81%AF%E4%BD%95%E3%81%8B\">フックとは何か</a></li>\n<li>\n<p><a href=\"/react-hooks-basic/#usestate\">useState</a></p>\n<ul>\n<li><a href=\"/react-hooks-basic/#usestate-%E3%81%AE%E6%A7%8B%E6%96%87\">useState の構文</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-hooks-basic/#useeffect\">useEffect</a></p>\n<ul>\n<li><a href=\"/react-hooks-basic/#useeffect-%E3%81%AE%E6%A7%8B%E6%96%87\">useEffect の構文</a></li>\n<li>\n<p><a href=\"/react-hooks-basic/#%E4%BD%BF%E7%94%A8%E4%BE%8B\">使用例</a></p>\n<ul>\n<li><a href=\"/react-hooks-basic/#%E7%AC%AC%EF%BC%92%E5%BC%95%E6%95%B0%E3%81%AA%E3%81%97%EF%BC%88%E6%AF%8E%E5%9B%9E%E5%AE%9F%E8%A1%8C%EF%BC%89\">第２引数なし（毎回実行）</a></li>\n<li><a href=\"/react-hooks-basic/#%E4%BE%9D%E5%AD%98%E9%85%8D%E5%88%97%E3%81%82%E3%82%8A\">依存配列あり</a></li>\n<li><a href=\"/react-hooks-basic/#%E5%88%9D%E5%9B%9E%E3%81%AE%E3%81%BF%E5%AE%9F%E8%A1%8C\">初回のみ実行</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-hooks-basic/#useref\">useRef</a></p>\n<ul>\n<li><a href=\"/react-hooks-basic/#useref-%E3%81%AE%E6%A7%8B%E6%96%87\">useRef の構文</a></li>\n<li>\n<p><a href=\"/react-hooks-basic/#%E4%BD%BF%E7%94%A8%E4%BE%8B-1\">使用例</a></p>\n<ul>\n<li><a href=\"/react-hooks-basic/#dom-%E3%81%AE%E5%8F%82%E7%85%A7\">DOM の参照</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-hooks-basic/#usememo\">useMemo</a></p>\n<ul>\n<li>\n<p><a href=\"/react-hooks-basic/#usememo-%E3%81%AE%E6%A7%8B%E6%96%87\">useMemo の構文</a></p>\n<ul>\n<li><a href=\"/react-hooks-basic/#%E4%BD%BF%E7%94%A8%E4%BE%8B-2\">使用例</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/react-hooks-basic"},"frontmatter":{"title":"React Hooks 基礎","date":"2022-07-17","description":"React Hooks基礎。考え方から、State, Props, Effect, Memo, Refの基本的な使い方まで。","tags":["React"],"slug":"react-hooks-basic"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/react-hooks-basic","relatedPosts":[{"title":"D3.js x React.js 基礎","slug":"react-d3-basic","date":"2022-07-17","score":50}],"latestPosts":[{"title":"Markdownで書ける静的サイトにこだわる理由","slug":"why-blog-by-markdown","date":"2022-07-19"},{"title":"クラウドネイティブとは何か","slug":"cloud-native-computing-basic","date":"2022-07-19"},{"title":"D3.js x React.js 基礎","slug":"react-d3-basic","date":"2022-07-17"},{"title":"JavaScriptによる配列操作","slug":"JavaScript-Array-Manipulation","date":"2022-07-17"},{"title":"山口周著「知的戦闘力を高める独学の技法」を読んで","slug":"book-review-howto-learn","date":"2022-07-14"}],"previous":{"fields":{"slug":"/JavaScript-Array-Manipulation"},"frontmatter":{"title":"JavaScriptによる配列操作","date":"2022-07-17","tags":["JavaScript"],"slug":"JavaScript-Array-Manipulation","keywords":"JavaScript, 配列, map, filter, forEach, find, findIndex, 関数"}},"next":{"fields":{"slug":"/react-d3-basic"},"frontmatter":{"title":"D3.js x React.js 基礎","date":"2022-07-17","tags":["React","D3"],"slug":"react-d3-basic","keywords":"D3, D3.js, React, React.js, データ可視化, Dataviz, Data visualization"}}}}}